// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: query.sql

package models

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createGeolocation = `-- name: CreateGeolocation :one
INSERT INTO
    geolocations (
        degree,
        latitude,
        longitude,
        speed,
        vehicle_id,
        route_id,
        "timestamp"
    )
VALUES
    ($1, $2, $3, $4, $5, $6, $7) RETURNING degree, latitude, longitude, speed, vehicle_id, route_id, timestamp
`

type CreateGeolocationParams struct {
	Degree    pgtype.Float4
	Latitude  pgtype.Float4
	Longitude pgtype.Float4
	Speed     pgtype.Float4
	VehicleID pgtype.Int4
	RouteID   pgtype.Int4
	Timestamp pgtype.Timestamptz
}

func (q *Queries) CreateGeolocation(ctx context.Context, arg CreateGeolocationParams) (Geolocation, error) {
	row := q.db.QueryRow(ctx, createGeolocation,
		arg.Degree,
		arg.Latitude,
		arg.Longitude,
		arg.Speed,
		arg.VehicleID,
		arg.RouteID,
		arg.Timestamp,
	)
	var i Geolocation
	err := row.Scan(
		&i.Degree,
		&i.Latitude,
		&i.Longitude,
		&i.Speed,
		&i.VehicleID,
		&i.RouteID,
		&i.Timestamp,
	)
	return i, err
}

const getLatestByRoute = `-- name: GetLatestByRoute :one
SELECT
    degree, latitude, longitude, speed, vehicle_id, route_id, timestamp
FROM
    geolocations
WHERE
    route_id = $1
LIMIT
    1
`

func (q *Queries) GetLatestByRoute(ctx context.Context, routeID pgtype.Int4) (Geolocation, error) {
	row := q.db.QueryRow(ctx, getLatestByRoute, routeID)
	var i Geolocation
	err := row.Scan(
		&i.Degree,
		&i.Latitude,
		&i.Longitude,
		&i.Speed,
		&i.VehicleID,
		&i.RouteID,
		&i.Timestamp,
	)
	return i, err
}
