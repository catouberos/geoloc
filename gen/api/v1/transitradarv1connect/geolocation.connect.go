// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: api/v1/geolocation.proto

package transitradarv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/catouberos/transit-radar/gen/api/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// GeolocationServiceName is the fully-qualified name of the GeolocationService service.
	GeolocationServiceName = "api.v1.GeolocationService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// GeolocationServiceGetVehiclesByRouteProcedure is the fully-qualified name of the
	// GeolocationService's GetVehiclesByRoute RPC.
	GeolocationServiceGetVehiclesByRouteProcedure = "/api.v1.GeolocationService/GetVehiclesByRoute"
	// GeolocationServiceGetVehiclesByStationProcedure is the fully-qualified name of the
	// GeolocationService's GetVehiclesByStation RPC.
	GeolocationServiceGetVehiclesByStationProcedure = "/api.v1.GeolocationService/GetVehiclesByStation"
)

// GeolocationServiceClient is a client for the api.v1.GeolocationService service.
type GeolocationServiceClient interface {
	GetVehiclesByRoute(context.Context, *connect.Request[v1.GetVehiclesByRouteRequest]) (*connect.Response[v1.GetVehiclesByRouteResponse], error)
	GetVehiclesByStation(context.Context, *connect.Request[v1.GetVehiclesByStationRequest]) (*connect.Response[v1.GetVehiclesByStationResponse], error)
}

// NewGeolocationServiceClient constructs a client for the api.v1.GeolocationService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewGeolocationServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) GeolocationServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	geolocationServiceMethods := v1.File_api_v1_geolocation_proto.Services().ByName("GeolocationService").Methods()
	return &geolocationServiceClient{
		getVehiclesByRoute: connect.NewClient[v1.GetVehiclesByRouteRequest, v1.GetVehiclesByRouteResponse](
			httpClient,
			baseURL+GeolocationServiceGetVehiclesByRouteProcedure,
			connect.WithSchema(geolocationServiceMethods.ByName("GetVehiclesByRoute")),
			connect.WithClientOptions(opts...),
		),
		getVehiclesByStation: connect.NewClient[v1.GetVehiclesByStationRequest, v1.GetVehiclesByStationResponse](
			httpClient,
			baseURL+GeolocationServiceGetVehiclesByStationProcedure,
			connect.WithSchema(geolocationServiceMethods.ByName("GetVehiclesByStation")),
			connect.WithClientOptions(opts...),
		),
	}
}

// geolocationServiceClient implements GeolocationServiceClient.
type geolocationServiceClient struct {
	getVehiclesByRoute   *connect.Client[v1.GetVehiclesByRouteRequest, v1.GetVehiclesByRouteResponse]
	getVehiclesByStation *connect.Client[v1.GetVehiclesByStationRequest, v1.GetVehiclesByStationResponse]
}

// GetVehiclesByRoute calls api.v1.GeolocationService.GetVehiclesByRoute.
func (c *geolocationServiceClient) GetVehiclesByRoute(ctx context.Context, req *connect.Request[v1.GetVehiclesByRouteRequest]) (*connect.Response[v1.GetVehiclesByRouteResponse], error) {
	return c.getVehiclesByRoute.CallUnary(ctx, req)
}

// GetVehiclesByStation calls api.v1.GeolocationService.GetVehiclesByStation.
func (c *geolocationServiceClient) GetVehiclesByStation(ctx context.Context, req *connect.Request[v1.GetVehiclesByStationRequest]) (*connect.Response[v1.GetVehiclesByStationResponse], error) {
	return c.getVehiclesByStation.CallUnary(ctx, req)
}

// GeolocationServiceHandler is an implementation of the api.v1.GeolocationService service.
type GeolocationServiceHandler interface {
	GetVehiclesByRoute(context.Context, *connect.Request[v1.GetVehiclesByRouteRequest]) (*connect.Response[v1.GetVehiclesByRouteResponse], error)
	GetVehiclesByStation(context.Context, *connect.Request[v1.GetVehiclesByStationRequest]) (*connect.Response[v1.GetVehiclesByStationResponse], error)
}

// NewGeolocationServiceHandler builds an HTTP handler from the service implementation. It returns
// the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewGeolocationServiceHandler(svc GeolocationServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	geolocationServiceMethods := v1.File_api_v1_geolocation_proto.Services().ByName("GeolocationService").Methods()
	geolocationServiceGetVehiclesByRouteHandler := connect.NewUnaryHandler(
		GeolocationServiceGetVehiclesByRouteProcedure,
		svc.GetVehiclesByRoute,
		connect.WithSchema(geolocationServiceMethods.ByName("GetVehiclesByRoute")),
		connect.WithHandlerOptions(opts...),
	)
	geolocationServiceGetVehiclesByStationHandler := connect.NewUnaryHandler(
		GeolocationServiceGetVehiclesByStationProcedure,
		svc.GetVehiclesByStation,
		connect.WithSchema(geolocationServiceMethods.ByName("GetVehiclesByStation")),
		connect.WithHandlerOptions(opts...),
	)
	return "/api.v1.GeolocationService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case GeolocationServiceGetVehiclesByRouteProcedure:
			geolocationServiceGetVehiclesByRouteHandler.ServeHTTP(w, r)
		case GeolocationServiceGetVehiclesByStationProcedure:
			geolocationServiceGetVehiclesByStationHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedGeolocationServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedGeolocationServiceHandler struct{}

func (UnimplementedGeolocationServiceHandler) GetVehiclesByRoute(context.Context, *connect.Request[v1.GetVehiclesByRouteRequest]) (*connect.Response[v1.GetVehiclesByRouteResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.v1.GeolocationService.GetVehiclesByRoute is not implemented"))
}

func (UnimplementedGeolocationServiceHandler) GetVehiclesByStation(context.Context, *connect.Request[v1.GetVehiclesByStationRequest]) (*connect.Response[v1.GetVehiclesByStationResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.v1.GeolocationService.GetVehiclesByStation is not implemented"))
}
