// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.30.2
// source: protos/geolocation.proto

package protos

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Geolocation_GetVehiclesByRoute_FullMethodName   = "/protos.Geolocation/GetVehiclesByRoute"
	Geolocation_GetVehiclesByStation_FullMethodName = "/protos.Geolocation/GetVehiclesByStation"
)

// GeolocationClient is the client API for Geolocation service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GeolocationClient interface {
	GetVehiclesByRoute(ctx context.Context, in *VehiclesByRouteRequest, opts ...grpc.CallOption) (*VehiclesByRouteResponse, error)
	GetVehiclesByStation(ctx context.Context, in *VehiclesByStationRequest, opts ...grpc.CallOption) (*VehiclesByStationResponse, error)
}

type geolocationClient struct {
	cc grpc.ClientConnInterface
}

func NewGeolocationClient(cc grpc.ClientConnInterface) GeolocationClient {
	return &geolocationClient{cc}
}

func (c *geolocationClient) GetVehiclesByRoute(ctx context.Context, in *VehiclesByRouteRequest, opts ...grpc.CallOption) (*VehiclesByRouteResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(VehiclesByRouteResponse)
	err := c.cc.Invoke(ctx, Geolocation_GetVehiclesByRoute_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *geolocationClient) GetVehiclesByStation(ctx context.Context, in *VehiclesByStationRequest, opts ...grpc.CallOption) (*VehiclesByStationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(VehiclesByStationResponse)
	err := c.cc.Invoke(ctx, Geolocation_GetVehiclesByStation_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GeolocationServer is the server API for Geolocation service.
// All implementations must embed UnimplementedGeolocationServer
// for forward compatibility.
type GeolocationServer interface {
	GetVehiclesByRoute(context.Context, *VehiclesByRouteRequest) (*VehiclesByRouteResponse, error)
	GetVehiclesByStation(context.Context, *VehiclesByStationRequest) (*VehiclesByStationResponse, error)
	mustEmbedUnimplementedGeolocationServer()
}

// UnimplementedGeolocationServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedGeolocationServer struct{}

func (UnimplementedGeolocationServer) GetVehiclesByRoute(context.Context, *VehiclesByRouteRequest) (*VehiclesByRouteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVehiclesByRoute not implemented")
}
func (UnimplementedGeolocationServer) GetVehiclesByStation(context.Context, *VehiclesByStationRequest) (*VehiclesByStationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVehiclesByStation not implemented")
}
func (UnimplementedGeolocationServer) mustEmbedUnimplementedGeolocationServer() {}
func (UnimplementedGeolocationServer) testEmbeddedByValue()                     {}

// UnsafeGeolocationServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GeolocationServer will
// result in compilation errors.
type UnsafeGeolocationServer interface {
	mustEmbedUnimplementedGeolocationServer()
}

func RegisterGeolocationServer(s grpc.ServiceRegistrar, srv GeolocationServer) {
	// If the following call pancis, it indicates UnimplementedGeolocationServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Geolocation_ServiceDesc, srv)
}

func _Geolocation_GetVehiclesByRoute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VehiclesByRouteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GeolocationServer).GetVehiclesByRoute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Geolocation_GetVehiclesByRoute_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GeolocationServer).GetVehiclesByRoute(ctx, req.(*VehiclesByRouteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Geolocation_GetVehiclesByStation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VehiclesByStationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GeolocationServer).GetVehiclesByStation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Geolocation_GetVehiclesByStation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GeolocationServer).GetVehiclesByStation(ctx, req.(*VehiclesByStationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Geolocation_ServiceDesc is the grpc.ServiceDesc for Geolocation service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Geolocation_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "protos.Geolocation",
	HandlerType: (*GeolocationServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetVehiclesByRoute",
			Handler:    _Geolocation_GetVehiclesByRoute_Handler,
		},
		{
			MethodName: "GetVehiclesByStation",
			Handler:    _Geolocation_GetVehiclesByStation_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protos/geolocation.proto",
}
